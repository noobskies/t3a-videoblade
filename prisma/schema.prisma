// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    // Subscription fields
    subscriptionId     String?
    subscriptionStatus String? // active, canceled, past_due, trialing
    subscriptionTier   String? @default("free") // free, pro, premium
    stripeCustomerId   String? @unique

    // Relations
    accounts       Account[]
    sessions       Session[]
    videos         Video[]
    channels       Channel[]
    scheduledPosts ScheduledPost[]
    Analytics      Analytics[]
    UsageLimit     UsageLimit[]
}

model Channel {
    id             String    @id @default(cuid())
    userId         String
    platform       String // youtube, tiktok, instagram, facebook, twitter
    platformId     String // platform-specific channel ID
    name           String
    handle         String? // @username or channel handle
    accessToken    String? // encrypted OAuth token
    refreshToken   String? // encrypted refresh token
    tokenExpiresAt DateTime?
    isActive       Boolean   @default(true)
    isConnected    Boolean   @default(true)
    lastSyncAt     DateTime?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    scheduledPosts ScheduledPost[]
    Analytics      Analytics[]

    @@unique([userId, platform, platformId])
    @@index([userId])
    @@index([platform])
}

model Video {
    id                 String   @id @default(cuid())
    userId             String
    title              String
    description        String?
    fileName           String
    originalName       String // original filename from upload
    fileUrl            String // storage URL
    thumbnailUrl       String?
    duration           Int? // duration in seconds
    fileSize           BigInt // file size in bytes
    mimeType           String
    width              Int? // video width
    height             Int? // video height
    fps                Float? // frames per second
    bitrate            Int? // bitrate in kbps
    status             String   @default("uploading") // uploading, processing, ready, error, deleted
    processingProgress Int?     @default(0) // 0-100
    errorMessage       String?
    metadata           Json? // additional video metadata
    tags               String[] // user-defined tags
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt

    user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    scheduledPosts ScheduledPost[]
    clips          VideoClip[]
    Subtitle       Subtitle[]

    @@index([userId])
    @@index([status])
    @@index([createdAt])
}

model ScheduledPost {
    id             String    @id @default(cuid())
    userId         String
    videoId        String
    channelId      String
    title          String
    description    String?
    thumbnailUrl   String? // custom thumbnail for this post
    scheduledFor   DateTime
    timezone       String    @default("UTC")
    status         String    @default("scheduled") // scheduled, publishing, published, failed, cancelled
    platformPostId String? // ID from the platform after publishing
    publishedAt    DateTime?
    failureReason  String? // reason for failure if status is failed
    retryCount     Int       @default(0)
    maxRetries     Int       @default(3)
    platformData   Json? // platform-specific data
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    video     Video       @relation(fields: [videoId], references: [id], onDelete: Cascade)
    channel   Channel     @relation(fields: [channelId], references: [id], onDelete: Cascade)
    Analytics Analytics[]

    @@index([userId])
    @@index([scheduledFor])
    @@index([status])
    @@index([channelId])
}

model VideoClip {
    id           String   @id @default(cuid())
    videoId      String
    name         String
    description  String?
    startTime    Float // start time in seconds
    endTime      Float // end time in seconds
    duration     Float // calculated duration
    fileUrl      String? // URL of the generated clip file
    thumbnailUrl String? // thumbnail for the clip
    status       String   @default("pending") // pending, processing, ready, error
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

    @@index([videoId])
}

model Subtitle {
    id              String   @id @default(cuid())
    videoId         String
    language        String   @default("en") // ISO language code
    content         String // SRT or VTT content
    format          String   @default("srt") // srt, vtt, ass
    isAutoGenerated Boolean  @default(false)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

    @@unique([videoId, language])
    @@index([videoId])
}

model Analytics {
    id              String   @id @default(cuid())
    userId          String
    scheduledPostId String?
    channelId       String?
    platform        String
    metricType      String // views, likes, comments, shares, etc.
    value           BigInt // metric value
    date            DateTime // date of the metric
    createdAt       DateTime @default(now())

    user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    scheduledPost ScheduledPost? @relation(fields: [scheduledPostId], references: [id], onDelete: Cascade)
    channel       Channel?       @relation(fields: [channelId], references: [id], onDelete: Cascade)

    @@unique([scheduledPostId, platform, metricType, date])
    @@index([userId])
    @@index([platform])
    @@index([date])
}

model UsageLimit {
    id           String   @id @default(cuid())
    userId       String
    limitType    String // videos_uploaded, posts_scheduled, storage_used
    currentUsage Int      @default(0)
    limitValue   Int // max allowed for current tier
    resetDate    DateTime // when usage resets (monthly)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, limitType])
    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
