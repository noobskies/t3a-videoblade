// Core application types for VideoBlade

export type SubscriptionTier = "free" | "pro" | "premium";

export type SubscriptionStatus =
  | "active"
  | "canceled"
  | "past_due"
  | "trialing"
  | "incomplete"
  | "incomplete_expired";

export type Platform =
  | "youtube"
  | "tiktok"
  | "instagram"
  | "facebook"
  | "twitter";

export type VideoStatus =
  | "uploading"
  | "processing"
  | "ready"
  | "error"
  | "deleted";

export type ScheduledPostStatus =
  | "scheduled"
  | "publishing"
  | "published"
  | "failed"
  | "cancelled";

export type VideoClipStatus = "pending" | "processing" | "ready" | "error";

export interface User {
  id: string;
  name?: string;
  email?: string;
  emailVerified?: Date;
  image?: string;
  createdAt: Date;
  updatedAt: Date;
  subscriptionId?: string;
  subscriptionStatus?: SubscriptionStatus;
  subscriptionTier?: SubscriptionTier;
  stripeCustomerId?: string;
}

export interface Channel {
  id: string;
  userId: string;
  platform: Platform;
  platformId: string;
  name: string;
  handle?: string;
  accessToken?: string;
  refreshToken?: string;
  tokenExpiresAt?: Date;
  isActive: boolean;
  isConnected: boolean;
  lastSyncAt?: Date;
  createdAt: Date;
  updatedAt: Date;
}

export interface Video {
  id: string;
  userId: string;
  title: string;
  description?: string;
  fileName: string;
  originalName: string;
  fileUrl: string;
  thumbnailUrl?: string;
  duration?: number;
  fileSize: bigint;
  mimeType: string;
  width?: number;
  height?: number;
  fps?: number;
  bitrate?: number;
  status: VideoStatus;
  processingProgress?: number;
  errorMessage?: string;
  metadata?: Record<string, unknown>;
  tags: string[];
  createdAt: Date;
  updatedAt: Date;
}

export interface ScheduledPost {
  id: string;
  userId: string;
  videoId: string;
  channelId: string;
  title: string;
  description?: string;
  thumbnailUrl?: string;
  scheduledFor: Date;
  timezone: string;
  status: ScheduledPostStatus;
  platformPostId?: string;
  publishedAt?: Date;
  failureReason?: string;
  retryCount: number;
  maxRetries: number;
  platformData?: Record<string, unknown>;
  createdAt: Date;
  updatedAt: Date;
}

export interface VideoClip {
  id: string;
  videoId: string;
  name: string;
  description?: string;
  startTime: number;
  endTime: number;
  duration: number;
  fileUrl?: string;
  thumbnailUrl?: string;
  status: VideoClipStatus;
  createdAt: Date;
  updatedAt: Date;
}

export interface Subtitle {
  id: string;
  videoId: string;
  language: string;
  content: string;
  format: string;
  isAutoGenerated: boolean;
  createdAt: Date;
  updatedAt: Date;
}

export interface Analytics {
  id: string;
  userId: string;
  scheduledPostId?: string;
  channelId?: string;
  platform: Platform;
  metricType: string;
  value: bigint;
  date: Date;
  createdAt: Date;
}

export interface UsageLimit {
  id: string;
  userId: string;
  limitType: string;
  currentUsage: number;
  limitValue: number;
  resetDate: Date;
  createdAt: Date;
  updatedAt: Date;
}

// API Response types
export interface ApiResponse<T = unknown> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
}

export interface PaginatedResponse<T> {
  data: T[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
}

// Upload types
export interface UploadProgress {
  loaded: number;
  total: number;
  percentage: number;
}

export interface VideoUploadData {
  file: File;
  title: string;
  description?: string;
  tags?: string[];
}

// Platform-specific types
export interface YouTubeVideoData {
  title: string;
  description?: string;
  tags?: string[];
  categoryId?: string;
  privacyStatus: "private" | "public" | "unlisted";
  publishAt?: string;
}

export interface PlatformConfig {
  name: string;
  displayName: string;
  icon: string;
  color: string;
  maxFileSize: number; // in bytes
  supportedFormats: string[];
  maxDuration?: number; // in seconds
  features: {
    scheduling: boolean;
    liveStreaming: boolean;
    analytics: boolean;
  };
}

// Calendar types
export interface CalendarEvent {
  id: string;
  title: string;
  start: Date;
  end: Date;
  platform: Platform;
  status: ScheduledPostStatus;
  video?: {
    id: string;
    title: string;
    thumbnailUrl?: string;
  };
}

// Dashboard types
export interface DashboardStats {
  totalVideos: number;
  scheduledPosts: number;
  publishedPosts: number;
  totalViews: number;
  storageUsed: number; // in bytes
  storageLimit: number; // in bytes
}

// Form types
export interface VideoUploadForm {
  title: string;
  description: string;
  tags: string[];
  file?: File;
}

export interface SchedulePostForm {
  videoId: string;
  channelId: string;
  title: string;
  description: string;
  scheduledFor: Date;
  timezone: string;
  thumbnailUrl?: string;
}

// Error types
export interface AppError {
  code: string;
  message: string;
  details?: Record<string, unknown>;
}

// Utility types
export type DeepPartial<T> = {
  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];
};

export type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;

export type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>;
